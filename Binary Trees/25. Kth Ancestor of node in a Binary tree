#include <iostream>
#include<bits/stdc++.h>
#include <queue>
using namespace std;
template <typename T>

class BinaryTreeNode {
   public:
    T data;
    BinaryTreeNode<T>* left;
    BinaryTreeNode<T>* right;

    BinaryTreeNode(T data) {
        this->data = data;
        left = NULL;
        right = NULL;
    }
};

BinaryTreeNode<int>* takeInput() {
    int rootData;
    cin >> rootData;
    if (rootData == -1) {
        return NULL;
    }
    BinaryTreeNode<int>* root = new BinaryTreeNode<int>(rootData);
    queue<BinaryTreeNode<int>*> q;
    q.push(root);
    while (!q.empty()) {
        BinaryTreeNode<int>* currentNode = q.front();
        q.pop();
        int leftChild, rightChild;

        cin >> leftChild;
        if (leftChild != -1) {
            BinaryTreeNode<int>* leftNode = new BinaryTreeNode<int>(leftChild);
            currentNode->left = leftNode;
            q.push(leftNode);
        }

        cin >> rightChild;
        if (rightChild != -1) {
            BinaryTreeNode<int>* rightNode = new BinaryTreeNode<int>(rightChild);
            currentNode->right = rightNode;
            q.push(rightNode);
        }
    }
    return root;
}

BinaryTreeNode<int>* kthancestor(BinaryTreeNode<int>* root,int k,int node)
{
	if(root==NULL)
	{
		return NULL;
	}
	if(root->data==node)
	{
		return root;
	}
	BinaryTreeNode<int>* l=kthancestor(root->left,k,node);
	BinaryTreeNode<int>* r=kthancestor(root->right,k,node);
	if(l!=NULL && r==NULL)
	{
		k--;
		if(k<=0)
		{
			k=INT_MAX;
			return root;
		}
		return l;
	}
	if(r!=NULL && l==NULL)
	{
		k--;
		if(k<=0)
		{
			k=INT_MAX;
			return root;
		}
		return r;
	}
	return NULL;
}
int main() {
    BinaryTreeNode<int>* root = takeInput();
    int k;
    cin>>k;
    int node;
    cin>>node;
    BinaryTreeNode<int>* ans=kthancestor(root,k,node);
    if(ans==NULL || ans->data==node)
    {
    	cout<<"-1";
	}
	else
	{
		cout<<ans->data;
	}
}
