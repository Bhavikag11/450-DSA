#include<iostream>
#include<bits/stdc++.h>
using namespace std;
template <typename T>
class BinaryTreeNode {
   public:
    T data;
    BinaryTreeNode<T> *left;
    BinaryTreeNode<T> *right;

    BinaryTreeNode(T data) {
        this->data = data;
        left = NULL;
        right = NULL;
    }
};


BinaryTreeNode<int> *takeInput() {
    int rootData;

    cin >> rootData;
    if (rootData == -1) {
        return NULL;
    }
    BinaryTreeNode<int> *root = new BinaryTreeNode<int>(rootData);
    queue<BinaryTreeNode<int> *> q;
    q.push(root);
    while (!q.empty()) {
        BinaryTreeNode<int> *currentNode = q.front();
        q.pop();
        int leftChild, rightChild;
        cin >> leftChild;
        if (leftChild != -1) {
            BinaryTreeNode<int> *leftNode = new BinaryTreeNode<int>(leftChild);
            currentNode->left = leftNode;
            q.push(leftNode);
        }

        cin >> rightChild;
        if (rightChild != -1) {
            BinaryTreeNode<int> *rightNode =
                new BinaryTreeNode<int>(rightChild);
            currentNode->right = rightNode;
            q.push(rightNode);
        }
    }
    return root;
}

vector<int>diagonal(BinaryTreeNode<int>* root)
{
	queue<BinaryTreeNode<int>*> q;
	vector<int> ans;
	if(root==NULL)
	{
		return ans;
	}
	q.push(root);
	while(!q.empty())
	{
		BinaryTreeNode<int>* front=q.front();
		q.pop();
		while(front)
		{
			if(front->left)
			{
				q.push(front->left);
			}
			ans.push_back(front->data);
			front=front->right;
		}
	}
	return ans;
}

int main() {
    BinaryTreeNode<int> *root = takeInput();
    vector<int>v=diagonal(root);
    for(int i=0;i<v.size();i++)
    {
    	cout<<v[i]<<" ";
	}
}
